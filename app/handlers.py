from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.generate import ai_generate, PERSONALITIES
from app.personality_manager import select_personality
import asyncio

router = Router()


class Gen(StatesGroup):
    wait = State()
    questionnaire = State()
    personality_selection = State()


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π —Ñ–∞–º–∏–ª—å—è—Ä–Ω–æ—Å—Ç–∏
    welcome_text = """–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.

–ß—Ç–æ–±—ã –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º, –¥–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. 
–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É!"""

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∫–µ—Ç—ã
    start_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!")]],
        resize_keyboard=True
    )

    await message.answer(welcome_text, reply_markup=start_keyboard)
    await state.set_state(Gen.questionnaire)


@router.message(Gen.questionnaire, F.text == "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!")
async def start_questionnaire(message: Message, state: FSMContext):
    questions = [
        "–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?",
        "–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü—ã —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω? (–º–æ–ª–æ–¥–∞—è/—Å–≤–µ—Ä—Å—Ç–Ω–∏—Ü–∞/—Å—Ç–∞—Ä—à–µ)",
        "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å? (—Å–¥–µ—Ä–∂–∞–Ω–Ω–∞—è/–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è)"
    ]

    await state.update_data(current_question=0, answers=[], questions=questions)
    await message.answer(questions[0], reply_markup=None)


@router.message(Gen.questionnaire)
async def handle_questionnaire(message: Message, state: FSMContext):
    data = await state.get_data()
    current_question = data['current_question']
    answers = data['answers']
    questions = data['questions']

    answers.append(message.text)
    current_question += 1

    if current_question < len(questions):
        await state.update_data(current_question=current_question, answers=answers)
        await message.answer(questions[current_question])
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã answered
        name, age_pref, temperament = answers

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[message.from_user.id] = {
            'name': name,
            'age_preference': age_pref,
            'temperament': temperament,
            'personality': select_personality(age_pref, temperament)
        }

        personality = user_data[message.from_user.id]['personality']

        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∫–∞–∫ {personality['name']} - {personality['traits']} üå∏\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ, {name}!"
        )
        await state.clear()


@router.message(Gen.wait)
async def stop_flood(message: Message):
    await message.answer('–î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥—É –ø–æ–¥—É–º–∞—Ç—å... üí≠')


@router.message()
async def generating(message: Message, state: FSMContext, bot):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É
    if user_id not in user_data:
        await cmd_start(message, state)
        return

    await state.set_state(Gen.wait)

    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –≤—ã–∑–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(1)

    try:
        personality = user_data[user_id]['personality']
        response = await ai_generate(message.text, personality)
        await message.answer(response)
    except Exception as e:
        await message.answer("–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫...")
        print(f"Error: {e}")

    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∏
@router.message(Command("change"))
async def change_personality(message: Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –¥—Ä—É–≥—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏—é!")
    await start_questionnaire(message, state)